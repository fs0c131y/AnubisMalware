Fire Heart
home HOME
listTOPICS 
webOPTIONS 
window batch command
﻿﻿
BAT batch script tutorial
Chapter One batch basis first batch of internal commands commonly Introduction
Batch Definition: As the name suggests, the batch file is a series of commands in a certain order as a set of executable text file with the extension BAT or CMD. These commands are collectively referred to as batch commands.
Tips: You can press Ctrl+C on the keyboard to forcibly terminate the execution of a batch.
After understanding the general meaning, we officially started to learn. Let’s take a look at a simple example!
@echo off
echo "Welcome to the very BAT!"
pause
save the above 3 commands as file test.bat or test.cmd and execute it.
He will display the following two jargons on the screen:
Welcome to the very BAT!
Please press any key to continue...
This is a simple batch file. This batch file uses two commands "echo" and " "Pause" and a special symbol "@"
From the simple batch processing above, we can find that the batch processing is actually a combination of some symbols with special meanings and some commands that complete the specified functions. Then there are How many such special symbols and function commands? Let's take a closer look at some of the most commonly used ones now!
(The following content comes from the network, please read it carefully, so that you can enter the example description in the next section)
=================== ====================================
Common batch processing commands (there are many unlisted commands, please See help information)
     1. REM and::
     2. ECHO and @
     3. PAUSE
     4, ERRORLEVEL
     5, TITLE
     6, COLOR
     7, mode configuration system equipment
     8, GOTO and:
     9, FIND
     10, START
     11, assoc and ftype
     12, pushd and popd
     13, CALL
     14, shift
     15, the IF
     16, the variable delay setlocal
     17, ATTRIB display or change file attributes
describes the command
1, REM and ::
the REM command as a comment, the general procedure used to add comments, the contents of the command is not executed, but it can echo.
Secondly, :: can also play the role of rem comments, and it is more concise and effective; but there are two points to note:
1. any character line starting with a colon: will be treated as a label in batch processing and ignored directly Everything after that.
Valid label: A string beginning with an alphanumeric character immediately after the colon is recognized by the goto statement.
Invalid label: a special symbol that is not alphanumeric followed by a colon. A label that goto cannot recognize can serve as a comment. So :: is often used as a comment symbol. In fact, :+ can also serve as a comment.
2. unlike rem, the character line after :: will not be echoed during execution, regardless of whether you use echo on to turn on the command line echo status, because the command interpreter does not think it is a valid command line. From a point of view, rem is more suitable than :: in some situations; in addition, rem can be used in the config.sys file.
In-line comment format:% comment content% (not commonly used, use it with caution)
2.
Putting ECHO and @ @ characters before the command will close the command echo, no matter whether echo is open at this time.
The functions of the echo command are listed as follows:
(1) Turn on or turn off the echo function
    Format: echo [{ on|off }]
    If you want to turn off the display of the "ECHO OFF" command line itself, you need to add it before the command line "@".
(2) Display the current ECHO setting status
    Format: echo
(3) Output prompt message 
    format: ECHO message content The
    above are three common uses of the ECHO command, which are also familiar and used by everyone, but as a DOS command gold digger, you should also know The following tips:
(4) Close the DOS command prompt 
    . Type ECHO OFF in the DOS prompt state to turn off the display of the DOS prompt so that only the cursor is left on the screen. The prompt will not reappear until you type ECHO ON.
(5) Output a blank line, which is equivalent to input a carriage return 
    format: ECHO.
    It is worth noting that the "." in the command line must immediately follow ECHO and there can be no spaces in the middle, otherwise the "." will be output to the screen as a prompt message. In addition, "." can be replaced by any symbol such as:;"/[\]+. The
    command ECHO. The output of the carriage return can be used as the input of other commands through the DOS pipeline. For example, echo.|time is equivalent to TIME Enter a command is given after the execution so the implementation of the system will be displayed at the current time, automatically return to the DOS prompt.
(6) answer questions from the command 
    format: ECHO reply language | command file name
format described above can be used to simplify For some commands that require man-machine dialogue (such as: CHKDSK/F; FORMAT Drive:; del *.*), it uses the DOS pipeline command to use the preset reply output of the ECHO command as the input of the man-machine dialogue command. Below The example is equivalent to typing "Y" when the called command appears in the man-machine dialogue:
C:>ECHO Y|CHKDSK/F
C:>ECHO Y|DEL A :*.*
(7) Create a new file or add contents of the file 
format: ECHO file contents> filename
      ECHO file contents >> filename
For example:
C:> ECHO @ECHO OFF> AUTOEXEC.BAT establish an automatic batch file
C:> ECHO C:/CPAV/BOOTSAFE >> AUTOEXEC.BAT Append the content
C:>TYPE AUTOEXEC to the automatic batch file .
@ECHO OFF C:\CPAV\BOOTSAFE
(8) Output print content or print control code 
format to printer: ECHO printer control code>;PRN
      ECHO print content>;PRN
The following example is to input print control code to M-1724 printer. <Alt>156 is to press the Alt key and type 156 on the small keyboard, and the similar situation can be deduced by analogy:
C:>ECHO +156+42+116>;PRN (input the underscore command FS＊t)
C:>ECHO [email=+ 155@]+155@>;PRN[/email] (input the initialization command ESC@)
C:>ECHO.>;PRN (line feed)
(9) Make the horn sound 
C:>ECHO ^G
“^G” is Use Ctrl+G or Alt+007 to input in the dos window, and input multiple ^Gs to generate multiple beeps. The method of use is to directly add it to the batch file or call it as a batch file.
Here "^ G" belong to the use of special characters, please see later in this chapter
3, PAUSE
PAUSE, play the game people know the meaning of pause
here is to stop executing system commands and displays the following contents.
Example:
PAUSE
operation display:
please press any key to continue...
To display other prompts, you can use:
Echo other prompts & pause> nul
. 4, errorlevel
program code returned
echo% errorlevel%
each operation end command, the command line format can be used to view the return code
for determining whether the command just executed successfully
default value is 0, the general command execution error will set errorlevel 1
5 title
sets the title of the cmd window
title new title #You can see that the title bar of the cmd window has changed
6. COLOR
sets the default console foreground and background colors.
COLOR [attr]
  attr console output color attributes of
color attributes specified by two hexadecimal numbers - first the background, the second the
foreground. Each number can be any of the following values:
    0 = black 8 = gray
    1 = blue 9 = light blue
    2 = green A = light green
    3 = lake blue B = light light green
    4 = red C = light red
    5 = purple D = light purple
    6 = yellow E = light yellow
    7 = white F = bright white
If you have not given any parameters, this command will restore the color to the CMD.EXE startup
colors. This value comes from the current console window, the/T switch, or the
DefaultColor registry value.
If the COLOR command is performed with the same foreground and background color, COLOR command
sets ERRORLEVEL 1.
For example: "COLOR fc" is generated on a bright red bright white
7, mode device configuration system
to configure system devices.
Serial port: MODE COMm[:] [BAUD=b] [PARITY=p] [DATA=d] [STOP=s]
                                [to=on|off] [xon=on|off] [odsr=on|off]
                                [octs=on|off] [dtr=on|off|hs]
                                [rts=on|off|hs|tg] [idsr=on|off]
Device status: MODE [device] [/STATUS]
Print redirection: MODE LPTn[:]=COMm[:]
Selected code page: MODE CON[:] CP SELECT=yyy
Code page status: MODE CON[:] CP [/STATUS]
Display mode: MODE CON[:] [COLS=c] [LINES=n]
Keystroke rate: MODE CON[:] [RATE=r DELAY=d]
Example:
mode con cols=113 lines=15 & color 9f
this command Set the size of the DOS window: 15 rows, 113 columns,
8, GOTO and:
GOTO who knows how to program will know that this means a jump.
In batch processing, it is allowed to construct a label with ":XXX", then use GOTO XXX to jump to the label: XXX, and then execute the command after the label.
Example:
if {%1}=={} goto noparms
if "%2"==""
The name of the goto noparms tag can be anything, but it is better to be a meaningful string, with a colon before it to indicate this The string is a label, and the goto command is based on this colon (:) to find the next step and jump there. It’s best to have some explanation so that others seem to understand your intentions.
Example:
@echo off
:start
set/a var+=1
echo %var%
if %var% leq 3 GOTO start
pause
operation display:
1
2
3
4
10, Start command
command to call an external program batch (the external program running in a new window, the batch program to continue, ignoring the health of the external program), if you must run external programs and other direct external program continue executing instructions after completion of the rest of the
embodiment: start explorer d:/
calling GUI opens the disc D
. 11, assoc ftype and
association file
assoc set an association 'file extension', associated to the 'file type'
ftype provided 'file type' association, the association 'execution procedures and parameters'
when you double-click a .txt file, windows are not based on direct .txt judgment notepad.exe open
but the first judgment belongs txtfile .txt 'file type'
command and then call the associated txtfile The line txtfile=%SystemRoot%\system32\NOTEPAD.EXE %1
can modify these two associations
assoc in "Folder Options" → "File Types" #Show all'file extensions' associated
assoc.txt #Show .txt represents "File Type", the result shows .txt=txtfile
assoc .doc #Display the "File Type" represented by .doc, and the result shows .doc=Word.Document.8
assoc. exe #Display the "file type" represented by .exe, the result shows.exe=exefile
ftype #Display all "file types" associated
ftype exefile #Display the command line associated with the exefile type, the result shows exefile="%1" %* 
assoc .txt=Word.Document.8
Set .txt as a word type document, you can see .txt file to the icon has changed
assoc .txt = txtfile
restore the right of association .txt
ftype exefile = "% 1"% *
correctly associated exefile of recovery
if the association has been corrupted, you can run command.com, and then enter it Command
12, pushd and popd
switch the current directory
@echo off
c: & cd/& md mp3 #create mp3 folder
md d:\mp4 in C:/#create mp4 folder
cd/dd:\mp4 in D:\
#Change the current directory to d:\mp4 pushd c:\mp3 #Save the current directory, and switch the current directory to c:\mp3
popd #Restore the current directory to the previously saved d:\mp4,
generally not very useful, in the current directory name It helps a little when not sure. (Useful in DOS programming)
13, CALL
The CALL command can call another batch during the execution of the batch. When the other batch is executed, continue to execute the original batch.
CALL command
calls a batch command, which has the same effect as executing the command directly. Useful, such as multi-level nesting of variables, see later in the tutorial. In batch programming, a command string can be generated according to certain conditions, and the string can be executed with call, as shown in the example.
CALL [drive:][path]filename [batch-parameters]
calls other batch programs. The filename parameter must have a .bat or .cmd extension.
CALL: label arguments
calls the command section in this file, which is equivalent to a subroutine. Command section is called a label: the beginning of the label
to command goto: end eof.
In addition, the batch script text parameter reference (%0, %1, etc.) has been changed as follows:
     %* in the batch script points out all parameters (such as %1 %2 %3 %4 %5 ...)
     batch parameters ( The substitution of %n) has been enhanced. You can use the following syntax: (run the following example directly if you don’t understand it)
         %~1-delete the quotes ("), expand %1
         %~f1-expand %1 to a fully qualified path name
         %~d1-only Extend %1 to a drive
         letter%~p1-Extend %1 to only one path
         %~n1-Only expand %1 to a file name
         %~x1-Only expand %1 to a file extension
         %~s1-The expanded path refers to the short name
         %~a1-Expand %1 to the file attribute
         % ~t1-Extend %1 to the date/time of the file
         %~z1-Extend %1 to the size of the file
         %~$PATH: 1-Find the directory listed in the PATH environment variable, and
                       expand %1 to the first found A fully qualified name. If the environment
                       variable name is not defined, or the file is not found, this key combination will be
                       expanded to an empty string
        . Modifiers
    can be combined to obtain multiple results:
%~dp1-Only expand %1 to the drive letter and path
        %~nx1- Extend %1 only to the file name and extension
        %~dp$PATH:1-Search for %1 in the directories listed in the PATH environment variable
                       and expand to the drive letter and path of the first file found.
        %~ftza1-Extend %1 to output lines like DIR.
    In the above example, %1 and PATH can be replaced by other valid values.
The %~ syntax is terminated by a valid parameter number. % ~ Modifiers may not be used with% *
Note: whether to ignore the parameters represent real parameter expansion file, the current directory are extended
to understand the knowledge of the above, the following example is critical.
For example:
@echo off
Echo generates a temporary file> tmp.txt
Rem down to save the current directory, and then set c:\windows as the current directory
pushd c:\windows
Call :sub tmp.txt
Rem down to restore the current directory of the previous time
Popd
Call :sub tmp.txt
pause
Del tmp.txt
exit
:sub
Echo Remove quotation marks: %~1
Echo expand to path: %~f1
Echo expand to a drive letter : %~d1
Echo expand to a path: %~p1 
Echo Expand to a file name: %~n1
Echo Expand to a file extension: %~x1
Echo expanded path refers to the short name: %~s1 
Echo expanded to file attributes: %~a1 
Echo expanded to file date/time: %~t1 
Echo expanded to file size: %~z1 
Echo expanded to drive letter and path :%~dp1
Echo expands to the file name and extension: %~nx1
Echo expands to the output line similar to DIR: %~ftza1
Echo.
Goto :eof
Example:
set aa=123456
set cmdstr=echo %aa%
call %cmdstr%
pause
In this example, if you run %cmdstr% without calling, the result will be displayed as %aa% instead of 123456.
14. Shift
changes the position of the replaceable parameters in the batch file.
The SHIFT [/n]
name extension is enabled if the command, SHIFT command supports/n command line switch; switch tells the command-line
commands from the n-th shift parameter start; n is between zero and eight. For example:
    SHIFT/2
will shift %3 to %2, %4 to %3, etc.; and does not affect %0 and %1.
15. IF
IF conditional judgment statement, the syntax format is as follows:
IF [NOT] ERRORLEVEL number command
IF [NOT] string1==string2 command
IF [NOT] EXIST filename command
The following are introduced one by one. For more detailed analysis, please see the following chapters.
(1) IF [NOT] ERRORLEVEL number command
IF ERRORLEVEL The sentence must be placed after a certain command. After the command is executed, IF ERRORLEVEL will determine the return value of the command.
The number of Number ranges from 0 to 255, and the sequence of values ​​should be from large to small when judging. Is greater than the value of the return value is equal to specified condition is satisfied
Example:
@echo OFF
the dir C:
REM is the exit code> = 1 Jump Title to perform at 1,> = 0 at 0 to execute the title jump
IF ERRORLEVEL 1 goto 1
IF ERRORLEVEL 0 goto 0
Rem The two lines above cannot be exchanged, otherwise it will show success if it fails.
:0
Echo command executed successfully!
After the Rem program is executed, jump to the heading exit to exit
goto exit
:1 The
echo command failed to execute!
After the Rem program is executed, jump to the heading exit to exit
goto exit
:exit
pause
operation shows: the command is executed successfully!
(2) IF [NOT] string1==string2 command
string1 and string2 are both character data, the case of characters in English will be regarded as different, the equal signs in this condition must be two (absolutely equal meaning)
conditions are equal Then execute the following command to
detect the value of the current variable to make a judgment. In order to prevent the string from containing spaces, the following format can be used
if [NOT] {string1}=={string2} command
if [NOT] [string1]==[string2 ] command
if [NOT] "string1"=="string2"
This way of writing command actually treats parentheses or quotation marks as part of the string, as long as the left and right sides of the equal sign are the same, for example, the following writing will not work:
if {string1 }==[string2] command
(3) IF [NOT] EXIST filename command
EXIST filename means the file or directory exists
echo off
IF EXIST autoexec.bat echo file exists!
IF not EXIST autoexec.bat echo file does not exist!
You can put this batch processing on the C drive and D drive separately to see the effect
16, setlocal with variable delay
content of this article references [hero produced] batch Tutorial:
To advanced, variable delay will be over in the first place! So I hope you can read this part seriously.
In order to better illustrate the problem, we first introduce an example.
Example 1:
@echo off
set a=4
set a=5 & echo %a%
pause
Result: 4
Explanation: Why is it 4 instead of 5? Obviously changed the value of variable a to 5 before echo?
Let us first understand the mechanism of batch running commands:
batch read commands are read line by line (in addition, for commands, etc., all statements enclosed by a pair of parentheses are also treated as a line), To complete the necessary preprocessing work before, this includes assigning values ​​to the variables in the command line. Let’s analyze Example 1. Before the batch process runs to the sentence "set a=5 & echo %a%", the whole sentence is read and preprocessed-the variable a is assigned a value, then Of course %a% is 4! (There is no reason, batch processing does this.)
In order to be able to perceive the dynamic changes of environment variables, batch processing is designed with variable delays. Simply put, after reading a complete statement, the variable of the row is not assigned immediately, but will be assigned before a single statement is executed, which means that the assignment of the variable is "delayed".
So how to turn on variable delay? What do you need to pay attention to for variable delay? Give an example to illustrate:
Example 2:
@echo off
setlocal enabledelayedexpansion
set a=4
set a=5 & echo !a!
pause 
Result: 5
Explanation: The variable delay is activated and the correct answer is obtained. The startup sentence for variable delay is "setlocal enabledelayedexpansion", and the variable should be enclosed by a pair of exclamation marks "!!" (note that the English exclamation mark should be used), otherwise there will be no variable delay effect.
Analyze example 2. 1. "setlocal enabledelayedexpansion" turns on the variable delay, and then "set a=4" first assigns variable a to
4, and the sentence "set a=5 & echo !a!" assigns variable a to 5 and Output (due to the variable delay being started, the batch process can perceive the dynamic change, that is, instead of assigning a value to the row variable first, but assigning a value to the variable during operation, so the value of a is 5 at this time).
Give another example to consolidate it.
Example 3:
@echo off
setlocal enabledelayedexpansion
for/l %%i in (1,1,5) do (
set a=%%i
echo !a!
)
pause
Result:
1
2
3
4
5
Explanation: This example enables variables Delay and use "!!" to expand the variable, so we get the expected result. What happens if you don’t use variable delay
What is the result? The result is this:
ECHO is off.
ECHO is off.
ECHO is off.
ECHO is off.
ECHO is off.
That is, the dynamic changes in the for statement are not perceived.
Tip: Without enabling the variable delay, the change of a variable in a certain command line must be reflected in the next command. This can also be used, see examples.
Example: Exchange the values ​​of two variables without using intermediate variables
@echo off
:: Purpose: Exchange the values ​​of two variables without using temporary variables
::Code by JM 2007-1-24 [email=CMD@XP]CMD @XP[/email]
::Source: http://www.cn-dos.net/forum/viewthread.php?tid=27078
set var1=abc
set var2=123
echo Before exchange: var1=%var1% var2= %var2%
set var1=%var2%& set var2=%var1%
echo after exchange: var1=%var1% var2=%var2%
pause
17. ATTRIB displays or changes file attributes
ATTRIB [+R|-R] [+A|-A] [+S|-S] [+H|-H] [[drive:] [path] filename] [/S [/D]]
  + set attributes .
  -Clear attributes.
  R Read-only file attribute.
  A Archive file attributes.
  S System file attributes.
  H Hide file attributes.
  [drive:][path][filename]
      specifies the attributes of the file to be processed.
  /S Process the matching files in the current folder and its subfolders.
  /D also processes folders.
Example:
MD Autorun
Attrib + A + S + H Autorun
above Autorun command will create a folder, and then set archive system, the hidden attribute
second common special symbol
    1, @ shielding character echo command line
    2,% Batch variable leading character
    3,> redirection character
    4, >> redirection character
    5, <, >&, <& redirection character
    6, | command pipe character
    7, ^ escape character
    8, & combined commands
    9. && combination command
    10, || combination command
    11, "" string delimiter
    12, comma
    13,; semicolon
    14, () bracket
    15,! Exclamation point
    16, other special markers that may be seen in batch processing : (Omitted)
        CR(0D) command line terminator 
        Escape(1B) ANSI escape character leader 
        Space(20) commonly used parameter delimiter 
        Tab(09); = unusual parameter delimiter 
        + COPY command file connector 
        * ? wildcard file 
        /boot parameter switch symbol 
        : batch label pilot symbols 
without further ado, the lecturing
1, @ command line echoing shield symbol
of this character meaning batch is close echo of the current line. We know from the previous lessons that
ECHO OFF can turn off the echo of the entire batch command, but it cannot turn off the ECHO OFF command. Now we add @ before the ECHO OFF command to achieve the requirement that all commands are not echoed.
2.% batch variable leader
Strictly speaking, this percent sign is not a command, it is just a parameter in the batch process (except for the case of using multiple% together, which will be described in detail later).
Use %var% for reference variables and %1 to %9 for external parameters of the calling program.
%0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %* are the parameters passed from the command line to the batch
% 0 batch file itself, including the full path and extension
% 1 the first argument
% 9 ninth parameter
% * All parameters from the beginning of the first parameter
parameter% 0 has a special function, you can call the batch itself , In order to achieve the purpose of batch processing itself loop, you can also copy the file itself and so on.
Example: The easiest way to copy the file itself is
copy %0 d:\wind.bat
Tips: add inline comment
%comment content% (can be used as inline comment, redirection symbol and pipe symbol cannot appear)
Why is this? At this time, "comment content" is actually regarded as a variable, and its value is empty, so it only serves as a comment. However, this usage is prone to grammatical errors and is generally not used.
3,> redirector
output redirection command
that character transmission means and covers, his role is to pass the results back to a range of operation (the back can be a file, or may be the default system console)
    in NT In a series of command lines, the scope of redirection is changed from the entire command line to a single command statement, which is restricted by the command separator &,&&,|| and statement block.
such as:
Use the command: echo hello >1.txt to create a file 1.txt with the content "hello" (note that there is a space at the end of the line)
Use the command: echo hello>1.txt to create a file 1.txt with the content "hello" ( Note end of the line with no spaces)
4 >> redirection operator
to redirect the output command
role of this symbol and> somewhat similar, but the difference between them and transfer >> is appended at the end of the file, and> is covering
use ibid
same take examples 1.txt do
use the command:
echo Hello> 1.txt
echo World >> 1.txt
this time 1.txt follows:
Hello
World
. 5, <,> &, <& redirector
three commands are commands conduit , But they are generally not commonly used. You only need to know about it. Of course, if you want to study it carefully, you can check the information yourself. (I have checked it, and I can't find relevant information on the Internet)
<, input the redirection command, and read the command input from the file instead of reading it from the keyboard.
@echo off
echo 2005-05-01>temp.txt
date <temp.txt
del temp.txt
so you can directly modify the current date without waiting for input
>&
<&, just the opposite of >&, reads input from one handle and writes it to the output of another handle.
Common handles: 0, 1, 2, undefined handles: 3-9
1>nul means that the output of correct information
is prohibited; 2>nul means that the output of error information is prohibited.
The 1 and 2 both represent the input and output addresses of a certain data stream (NT CMD is called handle, MSDOS is called device).
Handle 0: standard input stdin, keyboard input
handle 1: standard output stdout, to output a command prompt (console, code CON)
handles 2: standard error stderr, outputs to the command prompt window (console, code CON)
wherein The stdin can be <redirected, and stdout can be redirected by> and >>.
We already know that you can use the for command to read the content of the text, but if you only need to read the first line, using the for command is a bit troublesome. The simplest way as follows:
@echo OFF
SET/STR = P <0%
echo% STR%
PAUSE
operation of the first line of the batch file itself: @echo OFF
. 6, | pipe character command
Format: first command | second The command [| the third command...]
uses the result of the first command as the parameter of the second command. Remember this way is very common in unix.
For example:
dir c:\|find "txt"
The above command is: Find C:\All and find the TXT string.
FIND function please use the FIND/self-View?
When does the automatic formatting parameters format, I was so used to automatically format A disc
echo y | format a:/s /q/v: system
used format are know when to re-enter y to confirm whether the trays trays, plus echo y before this command and with the | character to the results echo y passed to the format command
so as to achieve the purpose of automatic input of y
(this command has dangers, Please be cautious when testing)
7. ^ The escape character
^ is the leading character for the special symbols <,>,&. In the command, he removes the special functions of the above three symbols, and only treats them as symbols without using them Special meaning.
For example, the result of
echo test ^>1.txt
is: test> 1.txt is
not appended to 1.txt, haha. Just shows up
In addition, the escape character can also be used as a line continuation symbol.
A simple example:
@echo off
echo hero^
Yes^
好^
Man
pause
Needless to say, try it yourself and you will understand.
Why does the escape character at the end of the line function as a line continuation character? The reason is simple, because there is an invisible symbol at the end of each line, that is, the carriage return. When the escape character is at the end of the row, the carriage return is invalidated, thus playing the role of continuation.
8, & combine command
syntax: first & second command command [& third command ...]
&, &&, || command combination, by definition, is the ability to combine a plurality of command When a command to carried out. This is allowed in batch scripts and is very widely used. Because batch processing does not recognize the number of commands.
This symbol allows two or more different commands to be used in a line. When the execution of the first command fails, it does not affect the execution of the subsequent commands.
The commands on both sides of & here are executed sequentially, from front to back.
For example:
the dir Z:/the dir & Y:/& the dir C:/
or more commands are continuously displayed content z, y, c disc, whether the disc exists ignore
9, && combine command
syntax: the first command a second && command [&& third command ...]
in this way can execute multiple commands at the same time, when met after the command execution error behind the command is not executed, if there has been no error has been executed all the commands you
this command the upper and the like, but the difference is that, when a first command fails, the command is not performed behind
the dir Z:/&& the dir Y:/&& the dir C:/
10, || combine command
syntax: first command | | The second command [|| The third command...]
In this way, multiple commands can be executed at the same time. When one command fails, the second command is executed. When the correct command is executed, the following commands will not be executed. If the correct command does not appear, all commands will be executed all the time. ;
Tip: combine command and redirection command with priority must be noted that
the pipe is higher than the priority of a command redirect command, the redirect command has higher priority than the command combination
problem: the C drive and D drive files and folders column To the a.txt file. Take an example:
dir c:/&& dir d:\> a.txt After
this is executed, there is only D drive information in a.txt! why? Because the priority of the combined command is not as high as the priority of the redirect command! So when this sentence is executed, this line is divided into two parts: dir c:/and dir d:\> a.txt, instead of the two parts as you think: dir c:/&& dir d:/and> a.txt. To use the combined command && to meet the requirements of the topic, you must write:
dir c:\> a.txt && dir d:/>> a.txt In
this way, according to the priority level, DOS will divide this sentence into the following two parts : Dir c:\> a.txt and dir d:/>> a.txt. The differences in the sentences in Example 18 are quite special, and it is worth studying and understanding.
Of course, you can also use the & command here (think about the reason for yourself):
dir c:\> a.txt & dir d:/>> a.txt
[This can also be used dir c:\;d:/>>a. txt to achieve]
11. ""
Progra ~. 1 CD
CD Pro *
The above three methods may enter the program files directory
12 ,, Comma
comma equivalent space, in some cases, "" so that the space can be used as
such as
the dir, C:/
13 is ,; semicolon
semicolon, when the same command, with the target may be different; to isolate, but perform the same effect, such as an error occurs during execution, only returns the error report, but the program will execute. (Some people say that they will not continue execution, in fact, you will know by testing) For
example:
dir c:\;d:\;e:\;z:/The
above command is equivalent to
dir c:\
dir d:\
dir e:\
dir f:\
If the Z disk does not exist, the operation displays: The system cannot find the specified path. Then terminate the execution of the command.
Example: dir c:\;d:\;e:\1.txt The
above command is equivalent to
dir c:\
dir d:\
dir e:\1.txt
where the file e:\1.txt does not exist, but the e drive Exist, there is an error message, but the command will still be executed.
why? If the target path does not exist, the execution is terminated; if the path exists, but the file does not exist, the execution continues.
Say about that! You have any comments, please Huitie! BAT have any questions please go to the exchange zone posting! The next section improvements!
14, () parentheses
parentheses have a special role in batch programming, the left and right parentheses need to For use, multiple lines of commands can be included in parentheses, and these commands will be regarded as a whole, as a command line.
    Brackets are common in for statements and if statements. They are used to nest loops or conditional statements. In fact, brackets () can also be used alone, please see the example.
Example:
Command: echo 1 & echo 2 & echo 3
can be written as:
(
echo 1
echo 2
echo 3
) The
above two writing methods have the same effect, and both writing methods are regarded as a command line.
Note: When such multiple commands are regarded as one command line, if there are variables in it, it involves the problem of variable delay.
15,! Exclamation point
nothing to say, in the variable delay problem, used to represent variable that should be expressed as% var%! Var !, see the previous command setlocal introduction.
The second chapter DOS loop: for command Detailed
Speaking before the FOR would ye first the novice friends to tell you, if you do not know what commands directly in the CMD enter the following:
? Name/look at this help file system format given, For example, for/? will display all the help of the FOR command! Of course, many rookies can't understand...so there are so many batch processing articles!!!! I also take care of the rookies and use the FOR command by myself The way to explain!
Officially start:
1. The basic format
FOR %%variable IN (set) DO command [command-parameters]
  %%variable specifies a single letter to indicate replaceable parameters.
  (set) Specify one or a group of files. You can use wildcards.
  command specifies the command to be executed for each file.
  command-parameters
             specifies parameters or command line switches for specific commands.
Parameters: FOR 4 parameters/d/l/r/f their role is explained below with examples I
now speak each parameter meaning
two parameters/D
the FOR/D %% the IN variable (SET) the DO Command [ command-parameters]
    If wildcard characters are included in the set, specify to match the directory name instead of the file
    name.
If Set (that is, the "related file or command" I wrote above) contains wildcard characters (* and ?), the specified Command will be executed for each directory that matches Set (not the file group in the specified directory).
This parameter is mainly used for directory search and will not search for files. Look at this example
@echo off
for/d %%i in (c:\*) do echo %%i
pause
Running will print out the names of all the directories in the root directory of the C drive, but none of the file names will be displayed!
Here comes one, for example, we want to type out the name of the folder under the current path with only 1-3 letters
@echo off
for/d %% i in (???) do echo %% i
PAUSE
so if you have a directory under the name of the current directory only 1-3 letters, will be displayed, no not show the
next explanation here * the role and number? number, N * represents any number of characters, and? numbers only represent any one character
knows a role for everyone to ponder a topic!
@echo OFF
for/d %% i in (window?) do echo% %i
pause is
saved to C drive and executed, what will be displayed? See for yourself! Display: windows
/D parameter can only display the name of the directory in the current directory, everyone should pay attention to this!
3. the parameter/R
FOR/R [[ drive:]path] %%variable IN (set) DO command [command-parameters]
    Check the directory tree rooted at [drive:]path and point to the
    FOR statement in each directory . If no directory after/R, then the current
directory. If the set is only a single dot (.) character, the directory tree is enumerated.
Recursion
As we know above,/D can only display the name of the directory under the current path, so now this/R is also related to the directory, what can he do? Don't worry, it is much stronger than/D!
He can put the current or you specify the path Read all the file names in the file, pay attention to the file name, what is the use?
Please note 2 points:
    1. If the file name in the set contains a wildcard (? or *), the directory specified by the/R parameter and below will be listed All files in the subdirectory used by the set that match with set, and directories without matching files are not listed.
    2. On the contrary, if there is a specific file name in the set without wildcard characters, the directory tree will be enumerated (that is, the directory and all subdirectories below it) will be enumerated, regardless of whether the specified file in the set exists. This is the same as the single point (.) enumerating directory tree mentioned earlier. A single point represents the current directory and can also be regarded as a file.
Example:
@echo off
for/rc:/%%i in (*.exe) do echo %%i
pause
Let’s save this BAT to D drive and execute it anywhere, I will see that he roots C drive Directories, and all the EXE files under the subdirectories of each directory are listed!!!!
Example:
@echo off
for/r %%i in (*.exe) do @echo %%i
pause The
parameters are different Right! The C:/is not added in front of this command, which is the search path, so it will use the current directory as the search path. For example, if you put it in the d:\test directory for your BAT, then he will put D List all the EXE files in the :\test directory and its subdirectories!!!
Example:
@echo off
for/rc:/%%i in (boot.ini) do echo %%i
pause
Run this example and find that all the directories of the c drive are enumerated. In order to list only the directories that boot.ini exists, it can be changed to the following :
@Echo off
for/rc:/%%i in (boot.ini) do if exist %%i echo %%i
pause
It’s great to search for files with this command. . . . . .
Everyone should understand this parameter! It's still full of fun commands!
4. the parameter/L
FOR/L %%variable IN (start,step,end) DO command [command-parameters]
    This set means that it is incremented from start to A sequence of numbers that ends.
    Therefore, (1,1,5) will produce the sequence 1 2 3 4 5, and (5,-1,1) will produce the
    sequence (5 4 3 2 1).
Use iteration variables to set the starting value (Start#), and then step through a range of values ​​until the value exceeds the set end value (End#)./L will execute the iteration variable by comparing Start# and End#. If Start# is less than End#, the command will be executed. If the iteration variable exceeds End#, the command interpreter will exit the loop. You can also use a negative Step# to step through the values ​​in this range in a decreasing manner. For example, (1,1,5) generates the sequence 1 2 3 4 5, and (5,-1,1) generates the sequence (5 4 3 2 1). The syntax is:
Looking at this description, it’s a little dizzy! Let’s look at the example and not dizzy!
@echo off
for/l %%i in (1,1,5) do @echo %%i
pause
Save and execute to see the effect, he will print from 1 2 3 4 5
This parameter of 5 numbers (1,1,5) also means that starting from 1 and adding 1 each time until 5 ends! When
you get dizzy, just print a number with P... Okay, to satisfy everyone, Look at this example
@echo off
for/l %%i in (1,1,5) do start cmd
pause
is not shocked after the execution, why there are 5 more CMD windows, haha! If you put that (1,1, ,5) What will happen if it is changed to (1,1,65535), let me tell you first, 65535 CMD windows will be opened... so many you don’t crash, you are strong!
Of course we can also change the start cmd as md %% i this will establish a specified directory named 1-65535 !!!
after reading this parameter was I given the nature of the damage, we look at the last parameter
V. parameter/F
/iteration and file parsing
use File parsing to process command output, string and file content. Use iteration variables to define the content or string to be checked, and use various options to further modify the parsing method. Use the options token option to specify which tokens should be passed as iteration variables. Note: When the token option is not used,/F will only check the first token.
The file parsing process involves reading the output, string, or file content, dividing it into separate lines of text, and parsing each line into zero or more tokens. Then call the for loop by setting the value of the iteration variable to the token. By default,/F passes the first blank separator of each line of each file. Skip blank lines.
The detailed help format is:
FOR/F ["options"] %%variable IN (file-set) DO command [command-parameters]
FOR/F ["options"] %%variable IN ("string") DO command [ command-parameters]
FOR/F ["options"] %%variable IN ('command') DO command [command-parameters] The
    quoted string "options" includes one or more
    keywords that specify different parsing options. These keywords are:
        eol=c-refers to the end of a line comment character (just one)
        skip=n-refers to the number of lines ignored at the beginning of the file.
        delims=xxx-refers to the delimiter set. This replaces the
                          default set of separators for spaces and tabs .
        tokens=x,y,mn-which symbol of each line is passed to each iteration
                          For itself. This leads to the allocation of additional variable names. The mn
                          format is a range. Specify mth with the nth symbol. If
                          the last character in the symbol string is asterisk,
                          then additional variables will be
                          allocated after the last symbol is resolved and accept the reserved text of the line. After testing, this parameter can
                          only distinguish 31 fields at most.
        usebackq-Use back quotation marks (the key `to the left of number 1 on the keyboard).
                        When the parameter usebackq is not used: file-set means a file, but cannot contain spaces.
                            Double quotation marks indicate a string, that is, "string"
                            single quotation marks indicate execution commands, that is
                          , when using the parameter usebackq for'command ' : file-set and "file-set" Both means files.
                          When there are spaces in the file path or name, you can use double quotation marks to enclose a
                            single quotation mark to indicate a string, that is, '
                            The back quotation mark indicates the command execution, that
is, the help information obtained by using the for/? command above `command` is directly copied.
Dizzy! Let me give you an example to help you understand these parameters!
For command example 1: *************************** ************
@echo off
rem First create a temporary file test.txt
echo; comment line, this is a temporary file, delete >test.txt
echo 11 paragraph 12 paragraph 13 paragraph 14 paragraph 15 Segment 16 >> test.txt
echo 21, 22, 23, 24, 25, 26 >> test.txt
echo 31-32-33-34-35-36> >test.txt
FOR/F "eol=; tokens=1,3* delims=,- "%%i in (test.txt) do echo %%i %%j %%k
Pause
Del test.txt
operation shows the result :
11 section 13 section 14 section 15 section 16 section
21 section 23 section 24 section 25 section 26 section
31 section 33 section 34 section segments -36 -35 segment
press any key to continue...
Why is this so let me explain? :
eol=; The line comment line
tokens=1,3* starting with a semicolon will assign the first paragraph, the third paragraph and the remaining fields of each line to the variables %%i, %%j, %%k
delims=,- (minus sign There is a space after it) with a comma minus sign and a space as the separator, and the space must be placed at the end.
For command example 2: ************************** **************
@echo off
FOR/F "eol= delims=" %%i in (test.txt) do echo %%i
Pause
will display all the contents of test.txt, Including the comment line, it is not explained.
For command example 3: ******************************************
In addition, the/F parameter also You can see this example as the result of the output command
@echo off
FOR/F "delims=" %%i in ('net user') do @echo %%i
pause
so that all the account names of your local machine come out, put the extension in The content enclosed in two single quotation marks means that when the command is executed, FOR will return the result of each line of the command. The addition of "delims=" is to allow me to display the entire line of spaces. If not, only spaces are displayed. The left column!
Basically finished the basic usage of FOR... If you have read the system help of FOR, you will find that there are some specially defined variables below him, I will not talk about these first. You should be tired because You are not tired, I am tired...
Chapter 3 Variables in the
FOR command There are some variables in the FOR command. Many novice friends do not understand their usage. Today I will explain their usage to you!
First list all the variables of FOR:
     ~I-Remove any quotation marks ( "), expand %I
     %~fI-expand %I to a fully qualified path name
     %~dI-only expand %I to a drive
     letter %~pI-only expand %I to a path
     %~nI- Only expand %I to a file name
     %~xI-Only expand %I to a file extension
     %~sI-The expanded path contains only the short name
     %~aI-Extend %I to the file attribute of the file
     %~tI
     -Extend %I to the date/time of the file %~zI-Extend %I to the size of the file
     %~$PATH:I-Find the directory listed in the path environment variable, and expand %I
                   to the first one found Fully qualified name. If the environment variable name
                   is not defined or the file is not found, this key combination will expand to
                   an empty string
We can see that each line has a capital letter "I", this I is actually the variable we brought in FOR, what is the variable name that our FOR statement substitutes, and what is written here. For
example: FOR/F %%z IN ('set') DO @echo %%z
where the variable name we substituted is z, then we have to change that I to z, for example, %~fI is changed to %~fz.
As for the previous %~p, the content is Grammar ! Let’s
start to explain:
1. ~I-Delete any quotation marks ("), expand
the variable %I as he explained, delete the quotation marks!
Let’s look at this example:
first create a temporary file temp.txt, content As follows
"1111
"2222"
3333"
"4444"44
"55"55"55
can create a BAT file code as follows:
@echo off
echo ^"1111>temp.txt
echo "2222">>temp.txt
echo 3333^" >>temp.txt
echo "4444"44>>temp.txt
echo ^"55"55"55> >temp.txt
rem Create a temporary file above, pay attention to unpaired quotation marks to add escape characters ^, do not leave spaces before the redirection symbols
FOR/F "delims=" %%i IN (temp.txt) DO echo %%~i
pause
del temp.txt
After execution, we see the echo of CMD as follows:
1111 #The quotation mark before the string is deleted
2222 # The quotation marks at the beginning and the end of the string have been removed
3333" #No quotation marks before the string, and the following quotation marks remain
4444"44 #The quotation marks in front of the string are deleted, and the quotation marks in the middle remain
55"55"55 #The quotation marks in front of the string deleted, but in the middle of the quotes reserved
press any key to continue...
and before the content of temp.txt compare, we will find quotes 1,2,5 lines are gone, this is to delete the quotation marks ~ i It works! The
rules for removing quotation marks are as follows (Brother BAT added!)
1. If there are quotation marks at the beginning and end of the string, delete the quotation marks at the beginning and the end;
2. If there are no quotation marks at the end of the string, delete the quotation marks at the beginning of the string;
3. If If there is a quotation mark in the middle of the string, or only a quotation mark at the end, it will not be deleted.
Tornado Supplement: No head is not deleted, there are heads and tails.
2.% ~ fI - expands% I to a fully qualified path name
to see an example:
Save the code in which just the place, I am here to put right the desktop.
FOR/F "delims==" %%i IN ('dir/b') DO @echo %%~ The content displayed after fi
pause
is as follows
C:\Documents and Settings\Administrator\desktop\test.bat
C:\Documents and Settings\Administrator\Desktop\test.vbs
When I change the %%~fi in the code directly to %%i
FOR/F "delims==" %%i IN ('dir/b') DO @echo %% i
PAUSE
will appear after performing the following:
test.bat
Test.vbs
by contrast, we can easily see that there is no path, and this is "expands% i to a fully qualified path name" role
is, if the% If the content of the i variable is a file name, he will print out the absolute path where the file is located, instead of just printing a file name, you will know by experimenting by yourself!
3. %~dI-only %I extended to a drive letter
see example:
code below, performed on the desktop I!
the FOR/F. "delims ==" %% I the IN ( 'the dir/B' ) After DO @echo %%~di
pause is
executed, the following
C is displayed in my CMD :
C:
I have two files on the desktop test.bat, test.vbs, %% ~ di role is, if the variable i %% content is a file or directory name, he will put him this file
or directory where the disk symbol ! print out
four,% ~ pI - expands% i only one path to
the usage and above, he not only print the path print the file name
FOR/F "delims ==" %% i IN ( 'dir/b') @echo %% ~ PI DO
PAUSE
! I will not fight the results, copy the code we all see the results of it, here are a few use such a code to come out, we all see the results of it
five,% ~ nI - only % I to a file name extension
only print the file name of
the FOR/F. "delims ==" %% I the IN ( 'the dir/B') the DO @echo %% ~ Ni
PAUSE
six,% ~ xI - only expands% I to a file extension
to print file extensions only
the FOR/F. "delims ==" %% I the iN ( 'the dir/B') the DO @echo %% ~ XI
PAUSE
seven,% ~ sI - expanded path contains short names
Print the absolute short file name
FOR/F "delims==" %%i IN ('dir/b' ) DO @echo %%~si
pause
eight,% ~ aI - expands% I to file attributes
properties of the print file
the FOR/F. "delims ==" %% I the IN ( 'the dir/B') the DO @echo %% ~ AI
pause
IX% ~ tI - expands% I to date/time of the file
to print the file creation date of
the FOR/F. "delims ==" %% I the iN ( 'the dir/B') the DO @echo %% ~ Ti
PAUSE
ten,% ~ zI - expands% I to a file size
of the print file size of
the FOR/F. "delims ==" %% I the iN ( 'the dir/B') the DO @echo %% ~ zi and
PAUSE
in the example above "delims ==" can changed to "delims =", that is not a delimiter
eleven,% ~ $ pATH: I - searches the directories listed in the pATH environment variable and expands% I
                   to a fully qualified name of the first found. If the environment variable name
                   is not defined or the file is not found, this key combination will expand to
                   an empty string
this is the last, and those above are not the same, I alone talk!
OFF @echo
the FOR/F. "delims =" %% I the IN ( "Notepad.exe") the DO ~ $ %% echo the PATH: I
PAUSE
Tornado NOTE: The above code shows the results C:/WINDOWS/system32/notepad.exe
him The meaning is to search the notepad.exe file in the path specified in the PATH variable. If there is notepad.exe, it will print out the absolute path where it is located, and print an error if not!
Well, on the introduction of FOR variable to which the!
                                 
Variables Chapter batch
batch variables, I put him into two categories, namely "system variables" and "Custom Variables"
We now Detailed these two variables!
1. the system variables
their values are automatically assigned by the system based on pre-defined conditions, that is, these systems have variable defines the values to them,
we do not need to give him an assignment, we just need to call and So! I will list them all!
%ALLUSERSPROFILE% returns the location of the "All Users" profile locally.
%APPDATA% returns locally where the application stores data by default.
%CD% returns the current directory string locally.
%CMDCMDLINE% locally returns the exact command line used to start the current Cmd.exe.
%CMDEXTVERSION% The system returns the version number of the current "Command Processor Extension".
%COMPUTERNAME% The system returns the name of the computer.
%COMSPEC% The system returns the exact path of the command line interpreter executable program.
%DATE% The system returns the current date. Use the same format as the date/t command. Generated by Cmd.exe. For
more information about the date command, see Date.
%ERRORLEVEL% The system returns the error code of the previous command. Usually a non-zero value is used to indicate an error.
%HOMEDRIVE% The system returns the drive letter of the local workstation connected to the user's home directory. Set based on the home directory value. With a
headed directory is specified in the "Local Users and Groups".
%HOMEPATH% The system returns the full path of the user's home directory. Set based on the home directory value. The user home directory is specified in "Local Users and Groups".
%HOMESHARE% The system returns the network path of the user's shared home directory. Set based on the home directory value. User's home directory is
specified in the "Local Users and Groups".
%LOGONSERVER% locally returns the name of the domain controller that authenticated the current logon session.
%NUMBER_OF_PROCESSORS% The system specifies the number of processors installed on the computer.
%OS% The system returns the operating system name. Windows 2000 shows that its operating system is Windows_NT.
%PATH% The system specifies the search path for executable files.
%PATHEXT% The system returns a list of file extensions that the operating system considers executable.
%PROCESSOR_ARCHITECTURE% The system returns the chip architecture of the processor. Value: x86 or IA64 based
Itanium
%PROCESSOR_IDENTFIER% The system returns the processor description.
%PROCESSOR_LEVEL% The system returns the model of the processor installed on the computer.
%PROCESSOR_REVISION% The system returns the version number of the processor.
%PROMPT% returns the command prompt settings of the current interpreter locally. Generated by Cmd.exe.
%RANDOM% The system returns any decimal number between 0 and 32767. Generated by Cmd.exe.
%SYSTEMDRIVE% The system returns
the drive containing the root directory of the Windows server operating system (ie, the system root directory) .
The %SYSTEMROOT% system returns the location of the root directory of the Windows server operating system.
%TEMP% and %TMP% system and user returns the default temporary directory used by the applications available to the currently logged-in user.
Some applications require TEMP, while other applications require TMP.
%TIME% The system returns the current time. Use the same format as the time/t command. Generated by Cmd.exe. For
more information about the time command, see Time.
%USERDOMAIN% locally returns the name of the domain that contains the user account.
%USERNAME% locally returns the name of the currently logged in user.
%USERPROFILE% returns the location of the current user's profile locally.
%WINDIR% The system returns the location of the operating system directory.
With so many system variables, how do we know what their value is?
Enter echo %WINDIR% in CMD
so that the value of a variable can be displayed!
For example, we want to copy files to the startup directory of the current account so you can
copy d:/1.bat "% USERPROFILE %/" start "menu/programs/startup/"
.% USERNAME% local returns the name of the user currently logged attention directory with a space enclosed in quotation marks
in addition to Some system variables, they represent a meaning or an operation!
They are respectively %0 %1 %2 %3 %4 %5 ... until %9 there is also a %*
%0 which is a bit special there are several meanings, meaning to talk about 9% 1%.
%, a first parameter returned batch
% batch 2 returns the second parameter
% 3% 9 so Analogy
backout batch parameters? How to return?
Let’s look at this example, save the following code as test.BAT and then put it in the C drive
@echo off
echo %1 %2 %3 %4
echo %1
echo %2
echo %3
echo %4
Enter CMD, enter cd c:\
Then enter test.bat I was the first argument I was the second parameter is the third argument to me I was the fourth parameter
middle note the space, we will see this result:
I was the first argument I The second parameter is the third argument I have is my fourth argument
I was the first argument
I was the second argument
I am a third parameter
I is the fourth parameter
contrast of the code,% 1 is "I am the
How to understand the first parameter "%2 is "I am the second parameter" !
These %1 and %9 can make batch processing also run with parameters, greatly improving the batch processing function!
There is also a %* other What is it? his role is not large, but the return parameters only, but he is a return value of all parameters, without the input% 1% 2 to determine one of
example
@echo OFF
echo% *
the same save for the test. bat into the C drive
into the CMD, enter cd c:/
and then enter test.bat I was the first argument I was my second argument is the third argument is the fourth argument I
can see him once put all parameters show out
good now say that more special% 0
% 0 this is not the return value of the parameter, he has two meanings!
first layer of meaning: returns the absolute path to the batch where
example:
@echo OFF
echo% 0
pause
saved as test.BAT run on the desktop, it will display the results of
"C:/Documents and Settings/Administrator/Desktop/test.bat"
He executed path where the current batch printed out, this is the return batch where the absolute path to the meaning of
the second layer of meaning: infinite loop implementation of BAT
example:
@echo OFF
net user
% 0
saved as BAT execution, he would execute an infinite loop of this net user command until you manually stop.
tornado added: actually% 0 is the parameter before the first parameter %1, and of course it is the batch file name (including path).
These are some of the batch system variables, and there are some variables, they also said that some of the features,
the FOR command that is, FOR variables have said, do not talk about it.
2. the custom variable
name suggests Italy, custom variable is assigned a value of variables given to him by us
to use custom variables you have to use the set command, look at an example.
@echo OFF
set var = I is the value of
echo% var%
PAUSE
save for the implementation of BAT, we'll see CMD in a return to "I value"
var variable name right = number change is to give the value of the variable
this is the easiest way to set a variable in the
If we want the user to manually input the value of the variable, not specified in the code, you can use the set command with the/p parameter
example:
@echo OFF
set/p var = Please enter the variable value of
echo% var%
PAUSE
var variable name = number on the right is prompt, not the value of the variable
after the value of the variable run by our own keyboard input! 
1. the interface design
nothing to say, take a look at the menu interface design master it:
@echo OFF
CLS
title ultimate and more Function repair
: menu
cls
color 0A
echo.
echo ==============================
echo Please select the operation to be performed, and then press Enter
echo ==============================
echo.
Echo 1. Network repair and Internet related settings, repair IE, customize Block website
echo.
echo 2. Virus kill tool, port closing tool, turn off auto play
As long as goto cho finishes the previous chapters of this tutorial, the above program should be able to understand. 2. if ... else ... conditional statement spoke earlier, DOS conditional statements are the following forms
IF [NOT] ERRORLEVEL number command
IF [NOT] string1==string2 command
IF [NOT] EXIST filename command
enhanced usage: IF [/I] string1 compare-op string2 command
enhanced usage with/I is not case sensitive !
enhance usage some symbols used to determine numbers:
EQU - equal
NEQ - not equal
LSS - less than
LEQ - less than or equal
GTR - greater than
GEQ - greater than or equal to
the above command commands can be used with a plurality of parentheses The combination of commands, including the else clause, can nest conditions or loop commands in the combination command.
For example:
    IF EXIST filename (
        del filename
    ) ELSE (
        echo filename missing
    )
can also be written as:
if exist filename (del filename) else (echo filename missing)
but this way of writing is not suitable for too many commands or the use of nested commands.
3. Loop statement
1. Loop at specified times
FOR/L %variable IN (start,step,end) DO command [command-parameters]
Combination command:
FOR/L %variable IN (start,step,end) DO (
Command1
Command2
… …
) 
2. Execute a loop statement on a certain collection.
FOR %%variable IN (set) DO command [command-parameters]
  %%variable specifies a single letter replaceable parameter.
  (set) Specify one or a group of files. You can use wildcards.
  command The command executed for each file can be combined with multiple commands in parentheses.
FOR/R [[drive:]path] %variable IN (set) DO command [command-parameters]
    Check the directory tree rooted at [drive:]path and point to the
    FOR statement in each directory . If no directory after/R, then the current
directory. If the set is only a single dot (.) character, the directory tree is enumerated.
As before, command can be combined with parentheses:
FOR/R [[drive:]path] %variable IN (set) DO (
Command1
Command2
……
commandn
)
3.
    The loop structure above the conditional loop is realized by the for command. The for command loop has a disadvantage, that is, the entire loop It is regarded as a command statement and involves the problem of variable delay.
    Using goto statements and conditional judgments, dos can implement conditional loops, which is very simple. Look at the example: For
example:
@echo off
set var=0
rem ************ The loop started
: continue
set/a +. 1 = var
echo% var% of cycles
IF% var% LSS 100 GOTO Continue
REM cycle ************ end
echo loop finished
pause
Example:
@echo OFF
SET var = 100
REM * ***********The loop has started
: continue
echo the %var% cycle
SET/A = VAR-. 1
IF var% 0% GTR GOTO Continue
REM cycle ************ end
echo loop finished
pause
four subroutines
can be called in a batch program running externally Programs, such as exe programs, can also call other batch programs. These can also be regarded as subprograms, but they are not convenient enough. If there are many programs to be called, it is not concise enough and very cumbersome.
   In windowsXP, batch processing can call a program segment in this program, which is equivalent to subprograms. These subprograms are generally placed behind the main program.
Subroutine call format:
  CALL :label arguments
Subroutine syntax:
  :label
  command1
  command2
  ......
  commandn
  goto :eof
In the subroutine segment, the parameter %0 refers to the label: label
subroutine is generally placed at the end, and pay attention to At the end of the main program, an exit or jump statement should be added to avoid entering the sub-process by mistake.
Variables in subprograms and main programs are global variables, and their scope of action is the entire batch program.
The parameters passed to the subroutine are specified in the call statement and are called in the form of %1, %2 to %9 in the subroutine, and the data returned by the subroutine to the main program only needs to be directly quoted after the call ends. You can also specify the return variable, please see the example below.
Example subroutine. 1:
@echo OFF
Call: Sub Hello return
echo Subroutine Return Value:%% return
PAUSE
: Sub
SET% = 2%. 1
GOTO: EOF
Run Results: Hello
Subroutine Example 2: Design of a plurality of seek Subroutine for adding integers
@echo off
set sum=0
call :sub sum 10 20 35
echo data summing result: %sum%
pause
:sub
rem Parameter 1 is the return variable name
set/a %1=%1+%2
shift/2
if not "%2"=="" goto sub
goto :eof
Run result: 65
5. Use ftp command to automatically download
ftp is a commonly used download tool, there are more than 40 commonly used commands in the ftp interface, I learned by myself , I won’t introduce it. Here is how to use the dos command line to call the ftp command to realize ftp automatic login, upload and download, and automatically exit the ftp program.
In fact, you can save the ftp command combination as a text file, and then use the following command to call it.
ftp -n -s: [[drive: ] path] filename
above filename for the ftp command file, including login IP address, user name, password, operation commands, etc.
Example:
Open Open 90.52.8.3 # ip
the User iware # users iware
password8848 #PASSWORDbin #Binary
transfer mode
prompt
cd tmp1 #Switch to the tmp1 directory under the iware user
pwd
lcd d:\download #Local directory
mget * #Download all files in the tmp1 directory
bye #Exit ftp
6. Use 7-ZIP compression and decompression command line
syntax :( 7-zip details, see the help file, see dizziness can be skipped, used to learn)
7z <the command> [<Switch> ...] <base_archive_name> [<arguments The> ...]
Each command of 7z.exe has different parameters <switch>, please see the help file
<base_archive_name> is the name of the compressed package and
<arguments> is the name of the file, supporting wildcards or file lists
Among them, 7z is to the command line compression and decompression program 7z.exe, <command> is the commands included in 7z.exe, listed as follows:
a: Adds files to archive.
Available parameters for the a command to add to the compressed package :
  -i (Include)
  - m (Method)
  -p (Set Password)
  -r (Recurse)
  -sfx (create SFX)
  -si (use StdIn)
  -so (use StdOut)
  -ssw (Compress shared files)
  -t (Type of archive)
  -u ( Update)
  -v (Volumes)
  -w (Working Dir)
  -x (Exclude) 
b: Benchmark 
d: Deletes files from archive.
Available parameters for the d command to delete files from the compressed package :
  -i (Include)
  -m (Method)
  - p (Set Password)
  -r (Recurse)
  -u (Update)
  -w (Working Dir)
  -x (Exclude) 
e: Extract extract files to the current directory or specify the directory.
Available parameters for the e command:
  -ai (Include archives)
  -an (Disable parsing of archive_name)
  -ao (Overwrite mode)
  -ax ( Exclude archives)
  -i (Include)
  -o (Set Output Directory)
  -p (Set Password)
  -r (Recurse)
  -so (use StdOut)
  -x (Exclude)
  -y (Assume Yes on all queries) 
l: Lists contents of archive.
t: Test 
u: Update 
x: eXtract with full paths Use the full path of the file to extract to the current directory or specify the directory.
Available parameters for the x command:
  -ai (Include archives)
  -an (Disable parsing of archive_name)
  -ao (Overwrite mode)
  -ax (Exclude archives)
  -i (Include)
  -o (Set Output Directory)
  -p (Set Password)
  -r (Recurse)
  -so (use StdOut)
  -x (Exclude)
  -y (Assume yes on all queries) 
seven, call VB ****** program
using the Windows script host, you can run the script at the command prompt. C******.exe provides command line switches for setting script properties.
Usage: C****** Script name [Script options...] [Script parameters...]
Options:
//B Batch mode: Do not display script errors and prompt information
//D Enable Active Debugging
//E: engine Use the engine that executes the script
//H:C******
Change the default script host to C******.exe //H:W****** Change the default script host W******.exe (default)
//I interactive mode (default, as opposed to//B)
//Job:xxxx execute a WSF job
//Logo displays the logo (default)
//Nologo does not display the logo: no logo is displayed during execution
//S saves the current command line options for the user
//T:nn timeout setting seconds: the maximum time allowed for the script to run
//X Execute the script in the debugger
//U Use Unicode to indicate the redirected I/O from the console
"Script name" is the name of the script file with extension and necessary path information, such as d:\admin\vb*** ***s\chart.vbs.
"Script options and parameters" will be passed to the script. There is a slash (/) in front of the script parameters. Each parameter is optional; but you cannot specify script options without specifying the script name. If no parameters are specified, C****** will display C****** syntax and valid host parameters.
8. Convert batch processing into executable file:
Since the batch file is a text file, anyone can edit it casually, and the commands inside will be destroyed if you are not careful, so if you convert it to .com The format of the executable file will not only greatly improve the execution efficiency, but also will not destroy the original function, and can also raise the priority to the highest. Bat2Com can complete this conversion work.
Tips: In the DOS environment, the priority of executable files from high to low is .com>.exe>.bat>.cmd, that is, if there are four types of files with the same file name in the same directory, when only When typing the file name, DOS executes name.com. If you need to execute the other three files, you must specify the full name of the file, such as name.bat.
This is a free green tool with a size of only 5.43K, which can be run in the command line of a pure DOS or DOS window. Usage: Bat2Com
FileName, this will generate an executable file named FileNme.com in the same directory, the execution effect is the same as the original .bat file.
9. time delay
article references [hero] Tutorial
What is the time delay? As the name implies, it is to delay a period of time after executing a command before proceeding to the next command.
The application of delay is shown in the next section: "Simulation Progress Bar".
1, using a ping command delay
Example:
  @echo OFF
  before the echo delay: Time%%
  ping/n-127.0.0.1. 3> NUL
  after the echo delay time: Time%%
  PAUSE 
Commentary: uses ping command "/n" parameter , Which means how many requests to send to the specified ip. In this example, three requests are sent to the local ip (127.0.0.1). 127.0.0.1 can be abbreviated as 127.1. ">nul" is to block the content displayed by the ping command.
2, using latency for command
Example:
  @echo OFF
  before the echo delay:% Time%
  for/L %% I in (1,1,5000) do echo %% I> NUL
  after the echo delay time: Time%%
  PAUSE
Explanation: The principle is very simple. It uses a counting loop and shielding the content displayed to achieve the purpose of delay.
3, the delay function using vbs, millisecond accuracy, error 1000 milliseconds
Example:
    @echo OFF
    echo% Time%
    Call: 5000 Delay
    echo% Time%
    PAUSE
    Exit
    : Delay
    .%. 1 Sleep ****** echo W is> Delay .vbs
    C******//B delay.vbs
    del delay.vbs
    goto :eof
Run display:
10:44:06.45
10:44:11.95
Please press any key to continue... The
above running result shows the actual delay It took 5500 milliseconds, and the extra 500 milliseconds was the time it took to create and delete temporary files. The error is within one second.
4, only the batch command achieve any time delay, the accuracy of the 10 ms, 50 ms within an error
only batch command delay operation can be achieved.
Example:
@echo off
set/p delay=Please enter the number of milliseconds to be delayed:
set TotalTime=0
set NowTime=%time%
::Read the start time, the time format is: 13:01:05.95
echo program start time:%NowTime%
:delay_continue
set/a minute1=1%NowTime:~3,2%-100
::Read the start time the number of minutes
SET/. 1% = a second1 nowtime: %% nowtime-5,2 ~: ~ -2% 0-100000
:: start time the seconds into milliseconds
SET nowtime% =% time
SET/a minute2 =1%NowTime:~3,2%-100
:: Read the current time in minutes
set/a second2=1%NowTime:~-5,2%%NowTime:~-2%0-100000
::Set now The time in seconds is converted to milliseconds
set/a TotalTime+=(%minute2%-%minute1%+60)%%60*60000+%second2%-%second1%
if %TotalTime% lss %delay% goto delay_continue
echo program end time ：%Time%
echo Set delay time:%delay% milliseconds
echo Actual delay time:%TotalTime% milliseconds
pause
Running display:
   Please enter the number of milliseconds to be delayed: 6000
   Program start time: 15:32:16.37
   Program end time: 15:32:22.37
   Set delay time: 6000 milliseconds
   Actual delay time: 6000 milliseconds
   , please press any key to continue...
Realization principle: first set the number of milliseconds to delay , And then accumulate time in a loop until the accumulated time is greater than or equal to the delay time.
Error: Windows system time can only be accurate to 10 milliseconds, so theoretically there may be an error of 10 milliseconds.
      After testing, when the delay time is greater than 500 milliseconds, there is generally no error in the above delay procedure. When the delay time is less than 500 milliseconds, there may be an error of tens of milliseconds. Why? Because the delay program itself has running time, and the system time can only be accurate to 10 milliseconds.
For ease of reference, the above example can be changed to the subroutine call form:
@echo off
echo Program start time: %Time%
call :delay 10
echo Actual delay time: %totaltime% milliseconds
echo Program end time: %time%
pause
exit
::-----------The following is the delay subroutine--------------------
:delay
@echo off
if "%1"= ="" goto :eof
set DelayTime=%1
set TotalTime=0
set NowTime=%time%
::Read the start time, the time format is: 13:01
:05.95 :delay_continue
set/a minute1=1%NowTime:~3,2%-100
set/a second1= 1%NowTime:~-5,2%%NowTime:~-2%0-100000
set NowTime=%time%
set/a minute2=1%NowTime:~3,2%-100
set/a second2=1%NowTime :~-5,2%%NowTime:~-2%0-100000
set/a TotalTime+=(%minute2%-%minute1%+60)%%60*60000+%second2%-%second1%
if %TotalTime% GOTO delay_continue% DelayTime% LSS
GOTO: EOF
X. simulated progress bar
gives a simulated progress of the procedure below. If you use it in your own program, you can make your program more beautiful.
@echo off
mode con cols=113 lines=15 &color 9f
cls
echo. The
echo program is being initialized... 
echo.
echo ┌──────────────────────────────────────┐
set/p= ■<nul
for/L %%i in (1 1 38) do set/pa=■<nul&ping/n 1 127.0.0.1>nul
echo 100%%
echo └──────────────── ────────────────────┘
pause
Comment: "set/pa=■<nul" means: only display the prompt information "■" without line breaks or You need to manually enter any information, so that each "■" can be output one by one on the same line. "Ping/n 0 127.1>nul" is the time interval for outputting each "■", that is, how often to output a "■".
XI enter special characters and application
Start -> Run -> cmd -> edit -> ctrl + p ( input means allows the special characters) -> Press ctrl + a smiley face is displayed.
(If you want to continue to input special characters, please press ctrl+p again, and then ctrl+a letter) The
above is the input method of special characters, which is very useful from the [hero] tutorial. That is, use the editing program edit to input the special characters, and then save it as a text file, then open the file under windows and copy the special symbols.
Some simple special symbols can be entered directly in the dos command window and saved as a text file with redirection.
Example:
C:>ECHO ^G>temp.
Application of special characters is also very interesting, to name just one example: backspace
backspace key to delete the character to the left represent, can not normally enter this key in your document, but you can edit editing program entry and copied out. which is"".
Using a backspace, flashing text effects may be designed
Example: flashing text
@echo OFF
: Start
SET/P = Moonlight <NUL
:: display text, the cursor is at the end of the row
of ping 127.0.0.1 -n 0> NUL
:: Set the delay time
set/pa=<nul
:: output some backspace characters and place the cursor at the leftmost end of the line (the number of backspace characters can be adjusted by yourself).
set/pa= <nul
:: Output spaces will overwrite the previously output text.
set/pa=<nul
:: Output the backspace character again and place the cursor at the left end of the line. The number of backspace characters must not be less than the number of spaces in front.
::Otherwise, the cursor cannot be moved to the left end.
goto start
example: output a Tang poem, each line flashes multiple times
@echo off
setlocal enabledelayedexpansion
set str=The bright moon in front of the bed is suspected to be frost on the ground, looking up at the moon, looking down at the hometown
::define string str
for %%i in (%str%) do (
rem Because str contains spaces, each part of str is assigned to the variable %%i in turn using spaces as separators.
        set char=%%i
        echo.
        echo.
        for/l %%j in (0,1,5) do (
                set/p=!char:~%%j,1!<nul
  rem Take out each character in the variable char in turn, and display it.
                ping -n 0 127.0.0.1>nul
  rem Set the time delay for outputting each character.
        )
call :hero %%i
)
pause>nul
exit
:hero
for/l %%k in (1,1,10) do (
ping/n 0 127.0 .0.1>nul
set/pa=<nul
set/pa= <nul
set/pa=<nul
ping/n 0 127.0.0.1>nul
set/pa=%1<nul
)
:: text flashes
goto :eof
12. Application skills of random numbers (%random%)
%RANDOM% The system variable returns any decimal number between 0 and 32767. Generated by Cmd.exe.
The 15th power of 2 is equal to 32768, and the above 0-32767 is actually the range of 15-bit binary numbers.
So, how to get random numbers within 100? It's very simple, just press %RANDOM% as 100 for remainder operation, see example.
Example: Generate 5 random numbers within 100
  @echo off
  setlocal enabledelayedexpansion
  for/L %%i in (1 1 5) do (
     set/a randomNum=!random!%%100
     echo random number: !randomNum!
  )
  pause
operation Result: (different for each run)
Random number: 91
Random number: 67
Random number: 58
Random number: 26
Random number: 20
Please press any key to continue...
Find the remainder operation set/a randomNum=!random!%%100 in 100 can be any integer between 1 and 32768.
Summary: Using the system variable %random%, calculating the remainder %%, string processing, etc., a lot of random processing can be achieved.
Consideration Title: generating a password to the random number targeting
ideas to answer: The 26 English letters or numbers and other special characters 10 composed of a string of several characters randomly therein.
Reference answer 1: (simple)
@echo off
call :randomPassword 5 pass1 pass2
echo %pass1% %pass2% 
pause
exit
:randomPassword
::---------Generate random password
::------- --%1 is the password length, %2 and later are the return variable names
::---------The for command can only distinguish 31 fields at most
@echo off
set password_len=%1
if not defined password_len goto: eof
if %password_len% lss 1 goto :eof
set wordset=abcdefghijklmnopqrstu vwxyz
set return=
set num=0
:randomPassword1
set/a num+=1
set/a numof=%random%%%26+1
for/f "tokens=%numof% delims= "%%i in ("%wordset%") do set return=%return%%%i
if %num% lss %password_len% goto randomPassword1
if not "%2"=="" set %2=%return%
shift/2
if not "%2"=="" goto randomPassword
goto :eof
reference answer 2: (optimal)
@echo off
call :randomPassword 6 pass1 pass2 pass3
echo %pass1% %pass2% %pass3%
pause
exit
:randomPassword
::---------Generate random password
: :---------%1 is the password length, %2 and later is the return variable name
::---------goto loop, variable nesting, command nesting
@echo off
eof description: This example involves the application of variable nesting and command nesting, see below. 13. Variable nesting and command nesting
    Compared with other programming languages, the dos function is relatively simple. To realize more complex functions, you need to make full use of various skills. Variable nesting and command nesting are one of such skills. .
First review the key content of the previous "string interception":
************************************ **********The
unified syntax format of the interception function is: %a:~[m[,n]]%
********************* *************************
Square brackets indicate optional,% is a variable identifier, a is a variable name, and a colon is used to separate variables For the name and description, the symbol ~ can be simply understood as "offset", m is the offset (default is 0), and n is the interception length (default is all).
If the percent sign needs to be treated as a single character, it must be written as %%
or more, which is the general format for dos variable processing. If m and n are variables, then this is variable nesting.
For example, set variable word to "abcdefghij" and variable num to "123456789"
%word:~4,1% is e, where 4 can be taken from the variable num, that is, %num:~3,1%, written as a combination as follows ：
%Word:~%num:~3,1%,1% After testing, this writing method cannot be executed correctly, written as %word:~(%num:~3,1%), 1% also does not work, then, how to achieve What about this kind of variable nesting? This must be combined with command nesting.
What is command nesting? Simply put, first use a dos command to generate a string, and this string is another dos command, use the call statement to call the string to execute it, and get the final result.
Example: Use call statement to implement command nesting
@echo off
set str1=aaa echo ok bbb
echo Initial string: %str1%
The command string generated by echo is as follows:
echo %str1:~4,7% The
final result generated by echo running command string is:
call %str1:~4,7%
pause
Running display:
initial string: aaa echo ok bbb
generated command character The string is as follows:
echo ok
runs the command string to generate the final result:
ok
, please press any key to continue... 
BAT scripting tutorial
Echo , @ , call , pause , rem ( tip: use :: instead of rem ) are the most commonly used commands for batch files, and we will learn from them.  Echo means displaying the characters after this command  echo off means that all commands run after this statement do not display the command line itself pI6u8O 

s8x

kW0@ is similar to echo off , but it is added at the top of each command line, which means that the command line of this line is not displayed at runtime (only affects the current line).  call call another batch file (if you do not call directly call another batch file, after executing the batch file will not return the current file and execute the subsequent commands the current file). 

e Si%o wh!E){-T p0PAUSE run batch execution sentence will be suspended and displayed on the screen Press any key to continue ... prompt, waits for the user to press any key to continue  rem represents the command post The characters are explanation lines (comments), which are not executed, but only for future reference (equivalent to comments in the program). 

Example 1 : Use edit to edit the a.bat file, enter the following content and save it as c:"a.bat , after executing the batch file, it can be realized: write all files in the root directory into  a.txt , start UCDOS , and enter WPS and other functions.

　　The content of the batch file is : Command notes: 

@echo off does not display subsequent command lines and current command lines

dir c: ". * *> a.txt 　　　　　　　the c disk file list written a.txt Call c:" UCDOS "ucdos.bat 　　　　call UCDOS echo hello display " Hello "   

pause pause , wait for key to continue rem ready to run wps Notes: Ready to run wps cd  ucdos enter ucdos directory       

wps  run wps 

Parameters of the batch file

Batch files can also use parameters like C language functions (equivalent to command line parameters of DOS commands), which requires the use of a parameter indicator "%" .

%[1-9] means parameters, which are strings separated by spaces (or Tab ) added after the file name when running the batch file . Variables can range from %0 to %9 , %0 represents the batch command itself, and other parameter strings are represented in order from %1 to %9 .

AO*@7C

lIQ u0Example 2 : C: There is a batch of processed files named f.bat in the root directory , and the content is: @echo off

format %1

;j1m

n@Q7t6l0

If C:">fa: is executed , then when f.bat is executed , %1 means a:, so format %1 is equivalent to format a:, so the actual execution of the above command is format a:

Example 3 : C: The batch processing file under the root directory is named t.bat and the content is : @echo off !@ b

[F,zs0type %1 type %2

Then run C:">t a.txt b.txt %1: means a.txt %2: means b.txt, so the above command will sequentially display the contents of a.txt and b.txt files.

Special order

If goto choice for is a more advanced command in batch files, if you use these very skillfully, you are an expert in batch files.

1. If is a conditional statement, which is used to determine whether the specified conditions are met, and thus decide to execute different commands.  There are three formats :

. 1 , IF [Not] " Parameter " == " string " command to be executed

If the parameter is equal to the specified string (not means unequal, the same below ) , the condition is met, and the command is executed, otherwise the next sentence is executed.

Example: if "%1"=="a" format a:

ke d02 , if [not] exist [ path "] The file name  of the command to be executed  if there is a specified file, then the condition is met, run the command, otherwise run the next sentence.

For example : if exist c:"config.sys type c:"config.sys means that if there is a c:"config.sys file, its content will be displayed.

T%@b

g i Jn ]I0

MS|&"

Qx03 , if errorlevel < number > the command to be executed

Many DOS programs will return a digital value after the end of the operation to indicate the result ( or status ) of the program. The return value of the program can be judged through the if errorlevel command, and different commands can be executed according to different return values (the return value must be Arrange from largest to smallest ) . If the return value is equal to the specified number, the condition is met and the command is executed, otherwise the next sentence is executed.

Such as if errorlevel 2 goto x2

2. When the goto  batch file runs here, it will jump to the label specified by goto ( label is label , and the label is defined by : followed by a standard string ) . The goto statement is generally used in conjunction with if to execute different according to different conditions. Command group.

Such as :

RE4P@]0goto  end

:end echo this is the end

The label is defined by ": string " , and the line where the label is located is not executed.

3. choice Use this command to allow the user to enter a character (for selection), thereby returning a different errorlevel according to the user's choice , and then cooperate with the if errorlevel to run different commands according to the user's choice.

Note: The choice command is an external command provided by DOS or Windows . Different versions of the choice command have slightly different syntax. Please use choice/? to view the usage.

The command syntax of choice (this syntax is the syntax of the choice command in Windows 2003 , the command syntax of other versions of choice is similar to this):

CHOICE [/C choices] [/N] [/CS] [/T timeout/D choice] [/M text]

d"7K0

Description : This tool allows users to select an item from the selection list and return the index of the selected item.

-Z b%c‑W7P

Ok"u8_/v8rq0Parameter list :   /C choices specifies the list of choices         to be created. The default list is  "YN" .

  /N
                    Hide the list of options in the prompt. The message before the prompt is displayed, and the option is still enabled.

x P^‑uV

H0

O)u]0  /CS
                   allows you to select case-sensitive options. By default, this tool is not case sensitive.

  /T timeout
         The number of seconds to pause before making the default selection. Acceptable values ​​are from  0 to  9999 . If  0 is specified , there will be no pause and the default option will be selected.

  /D choice specifies the default choice          after  nnnn seconds . Character must be called in  /C is selected from a group of options specified ; the same time, must  /T specified  nnnn .

M7h)V D"Y

@8l%e'N s+v0

  /M text
            specifies the message to be displayed before the prompt. If not specified, the tool will only display a prompt.

  /?
                    Display the help message.

t2D8lr‑}0

Note :

   The ERRORLEVEL environment variable is set to the key index selected from the selection set. The first option listed

The option returns  1 , the second option returns  2 , and so on. If the key pressed by the user is not a valid choice, the tool will sound a warning sound. If errors are detected at the tool, it will return  255 to

   ERRORLEVEL value. If the user presses  Ctrl+Break or  Ctrl+C , the tool will return  0

The  ERRORLEVEL value. In a batch procedure  ERRORLEVEL parameter, the parameter descending sequence arrangement.

Example :    CHOICE/?     CHOICE/C YNC/M " Please press  Y to confirm, press  N if no , or press  C to cancel . "    CHOICE/T 10/C ync/CS/D y -~$p4p9w

De$O'i-c%E0   CHOICE/C ab/M "option  1 Select  A , option  2 Select  B . "    The CHOICE/ab & C/N/M " option  1 Select  A , option  2 Select  B . " If I run the command: CHOICE/C YNC/M " Please press  Y to confirm , or press  N to cancel, or press  C to cancel . "The screen will display: Please press  Y to confirm , press  N to cancel, or press  C to cancel .  [Y,N,C]?

Example: The content of test.bat is as follows (note that when judging the return value with if errorlevel, the return value should be sorted from high to low) : @echo off choice/C dme/M "defrag,mem,end"
'wN

Tc u8a7[;"0if errorlevel 3 goto endif errorlevel 2 goto mem if errotlevel 1 goto defrag

:defrag c:"dos"defrag 
goto end

:mem mem goto end

X

B9yN[ L0

:end echo good bye

After this batch is running, it will display "defrag, mem, end[D, M, E]?" , the user can select dme , and then the if statement will make a judgment based on the user's choice, d means to execute the block labeled defrag , m It means executing the program segment with label mem , and e represents executing the program segment with label end. At the end of each program segment, the program jumps to the end label with goto  end , and then the program will display good bye , and the batch operation ends.

~;Vq6_

A^1i*r0

4. For loop command, as long as the conditions are met, it will execute the same command multiple times.

Syntax: execute a specific command for each file in a set of files.

FOR %%variable IN (set) DO command [command-parameters]

%%variable    specifies a single-letter replaceable parameter. (set)
        Specify one or a group of files. You can use wildcards.

command
      specifies the command executed for each file. command-parameters specifies parameters or command line switches for specific commands.

For example, there is a line in a batch file : for %%c in (*.bat *.txt) do type %%c

The command line will display the contents of all files with bat and txt extensions in the current directory .

Batch processing example

1. IF-EXIST

l

q:eHV*`qc0

1)

First use Notepad to create a batch file test1.bat in C:" , the content of the file is as follows: @echo off IF EXIST "AUTOEXEC.BAT TYPE "AUTOEXEC.BAT IF NOT EXIST "AUTOEXEC.BAT ECHO "AUTOEXEC.BAT does not exist 

Then run it:Yc6q4q)}}5EX N0C:">TEST1.BAT

If C:" exists AUTOEXEC.BAT file, then its content will be displayed, if it does not exist, the batch will prompt you that the file does not exist.

2)

Then create a test2.bat file with the following content: Z0@ECHO OFF IF EXIST "%1 TYPE "%1 
IF NOT EXIST "%1 ECHO "%1 does not exist

Execute : C:">TEST2 AUTOEXEC.BAT The result of this command is the same as above.

Explanation:  (1) IF EXIST is used to test whether the file exists, the format is  IF EXIST [ path + file name ] command c?k n+E!p 

V0(2) %1 in the test2.bat file is a parameter. DOS allows 9 batch parameter information to be passed to the batch file, which are %1~%9 (%0 represents the test2 command itself ) , which is a bit like in programming The relationship between actual parameters and formal parameters, %1 is the formal parameter, and AUTOEXEC.BAT is the actual parameter.

3) Further, create a file named TEST3.BAT with the following content:  @echo off IF "%1" == "A" ECHO XIAO IF "%2" == "B" ECHO TIAN 
IF "%3 "== "C" ECHO XIN

If you run: C:">TEST3 ABC

The screen will display : XIAO
TIAN XIN

If running: C:">TEST3 AB will display XIAO TIAN on the screen

During the execution of this command, DOS will assign an empty string to the parameter %3 .

2 , the IF-the ERRORLEVEL

&s C9l$G

nYi U0

Create TEST4.BAT with the following content: @ECHO OFF XCOPY C:"AUTOEXEC.BAT D:IF ERRORLEVEL 1 ECHO file copy failed IF ERRORLEVEL 0 ECHO successfully copied file 

Then execute the file : C:">TEST4

If the files are copied successfully, the screen will display " Success copy file " , otherwise it will display the " File copy failed " .

IF ERRORLEVEL is used to test the return value of its last DOS command. Note that it is only the return value of the last command, and the return value must be judged in the order from largest to smallest. So the following batch file is wrong: @ECHO OFF XCOPY C:"AUTOEXEC.BAT D:" IF ERRORLEVEL 0 ECHO successfully copied the file IF ERRORLEVEL 1 ECHO did not find the copy file IF ERRORLEVEL 2 ECHO user aborted the copy operation by ctrl-c IF ERRORLEVEL 3 ECHO preset error prevents file copy operation   

IF ERRORLEVEL 4 Error writing disk during ECHO copy

Regardless of whether the copy is successful, the following:

The copy file was not found. The  user aborted the copy operation by ctrl-c. The preset error prevented the file copy operation and the disk writing error during the copy process.  

Will be displayed.

The following are the return values ​​of several commonly used commands and their meanings:  backup 0 backup successful  S Yl EPe

y01 The backup file was not found  2 File sharing conflict prevented the backup from completing  3 The user aborted the backup with ctrl-c

4 The backup operation was aborted due to a fatal error

C3ezPN0

diskcomp

0 disk compares the same,  1 disk compares different 2 The user aborts the comparison operation by ctrl-c}03 The comparison operation is aborted due to a fatal error 4 The preset error aborts the comparison g0`2]%Wb9] [0

yM(eG ~{1J7bG&p0

diskcopy 0 Disk copy operation succeeded 1 Non-fatal disk read /write error. V;u  

 2 The user ends the copy operation by ctrl-c 3 The disk copy is aborted due to a fatal processing error 4 A preset error prevents the copy operationRfW5k0 

format 0 formatted successfully  : `4R$sg2~

 3 The user aborts the formatting process through ctrl-c 4 The formatting is aborted due to a fatal processing error 5 At the prompt "proceed with format ( y/n ) ?" the user types n to endz0jg0 

xcopy 0 successfully copied the file 1 did not find the copied file 2 the user aborted the copy operation by ctrl-c 4 preset error prevented the file copy operation 5 write error during copy  ~D'k.P0 

3 , IF STRING1 == STRING2

Create TEST5.BAT , the file content is as follows:

@echo off IF "%1" == "A" formAT A:

Cd])`$G0

Implementation:  C:">TEST5 A 
I

 will appear on the screen whether to format the A: drive.

h V InM0gl V0

n%" J!x B3c0k%d

 Note: In order to prevent the parameter from being empty, the string is generally enclosed in double quotation marks (or other symbols, note that reserved symbols cannot be used). Such as: if [%1]==[A] or  if %1*==A*

U0

5 , GOTO

Establish TEST6.BAT , the content of the file is as follows:  @ECHO OFF IF EXIST C:"AUTOEXEC.BAT GOTO _COPY GOTO _DONE :_COPY COPY C:"AUTOEXEC.BAT D:" :_DONE

Note:  (1) Before the label is the ASCII character colon ":" , there can be no spaces between the colon and the label.  (2) The naming rule of the label is the same as that of the file name. (3) DOS supports labels with up to eight characters. When two labels cannot be distinguished, it will jump to the nearest label.

0~7m-"1d`3z

e.~1Os0

6 , the FOR

Create C:"TEST7.BAT , the content of the file is as follows:  @ECHO OFF FOR %C IN (*.BAT *.TXT *.SYS) DO TYPE %C

Run:  C:>TEST7

After execution, the screen will display the contents of all files with the extensions of BAT , TXT and SYS in the root directory of the C: disk (excluding hidden files).

Use of bat command

.

　　A . Internal simple batch command Introduction  1. Echo command 

‑F:~e2|H0Ro

X1e-d:E ~0

　　Turn on or off the request echo function, or display a message. Without any parameters, the echo command will display the current echo settings.

　　syntax

echo [{on off}] [message]

Sample : @echo off/echo hello world

~2X

 　　In practical applications, we willoh2p#n0this command with a redirection symbol (also called a pipe symbol, generally used > >> ) to input some commands into a file of a specific format . This will be in the following examples Reflected.

2. @ command

B5~xk gJ0

　　It means that the commands following @ are not displayed . During the intrusion process (for example, using batch processing to format the enemy's hard disk), it is natural that the other party cannot see the commands you use.

Sample : @echo off 

W,M-O?$Rs0@echo Now initializing the program,please wait a minite... 

{TSC1U3s9xW0@format X:/q/u/autoset (The format command cannot use the /y parameter. Fortunately, Microsoft has left an autoset parameter for us. The effect is the same as /y . )

3. Goto command

　　Specify to jump to the label. After the label is found, the program will process the command from the next line.

　　syntax:

U?9@'L8O

e`)Q0

mR5T8c0goto  label ( label is a parameter, which specifies the line in the batch program to be transferred.) Sample : if {%1}=={} goto noparms if {%2}=={} goto noparms (if here, if , If you don’t understand %1 and %2 , skip over first, and there will be a detailed explanation later.)  

@Rem check parameters if null show usage :noparms

echo Usage: monitor.bat ServerIP PortNumber goto  end

　　The name of the label can be anything you want, but it is best to have a meaningful letter, add a letter before the letter: to indicate that this letter is a label, the goto command is based on this: to find the next step to jump there. It’s best to have some explanation so that others seem to understand your intentions.

D P

C Y04. Rem command

　　The comment command is equivalent to /*--------*/in the C language . It will not be executed, but just serves as a comment for others to read and modify later.

Rem  Message Sample : @Rem Here is the description.?

I? ~G#b1]/U&C%z

g B0

)y/s iK:r"7A

W5O0????? 5. Pause command

~+W/gMS("c&k

y|Z0

　　When you run the  Pause command, the following message will be displayed:

Press any key to continue... Sample ：@echo off 

:begin copy a:*.* d : "back echo Please put a new disk into driver A pause goto  begin

　　In this example, all the files on the disk in drive  A are copied to d:"back . When the displayed comment prompts you to put another disk in drive  A , the pause command will cause the program to hang so that you can replace the disk , And then press any key to continue processing.

6. Call command

　　Call another batch program from one batch program without terminating the parent batch program. The call command accepts a label used as the target of the call. If you use  Call outside of a script or batch file , it will not work on the command line.

　　syntax

call [[Drive:][Path] FileName [BatchParameters]] [:label [arguments]]

z‑Z*V0 　　parameters

[Drive:}[Path] FileName

S5c#Q1pFL0

jG&@!e"he,NPr0　　specifies the location and name of the batch program to be called. The filename parameter must have a  .bat or  .cmd extension.

7. start command

e e9YHW

}y^6A0

　　Calling external programs, all DOS commands and command line programs can be called by the start command.

　　Common parameters of intrusion:

j%MD0MIN at the start of the window is minimized SEPARATE start in separate space  16 Wei  Windows program HIGH in the  HIGH priority class to start applications REALTIME in  REALTIME priority class to start applications WAIT Start application and wait for it to end parameters such as transmission Arguments to the command /program     

d6j3]L*h0

　　When the executed application is a  32- bit  GUI application, CMD.EXE returns to the command prompt without waiting for the application to terminate. If executed within a command script, this new behavior will not occur.

Y LS#a `q r,@Q0

8. The choice command    # This command is not used yet, please go online to find information #

y/]5j `(~K

?0

Choice Use this command to allow users to enter a character to run different commands. The /c: parameter should be added when using it , and the characters that can be input should be written after c: without spaces. Its return code is 1234...

　　Such as : choice/c:dme defrag,mem,end

　　Will show

defrag, mem,end [D,M,E]? Sample : The contents of Sample.bat are as follows :  

      @echo off choice/c:dme defrag,mem,end

 

POLICIES   CONTACT  ABOUT
